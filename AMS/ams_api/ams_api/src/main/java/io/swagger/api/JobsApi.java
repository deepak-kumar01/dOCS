/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ActionParams;
import io.swagger.model.ActionResult;
import io.swagger.model.BaseResponse;
import io.swagger.model.Job;
import io.swagger.model.JobCreate;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-09-23T02:39:15.205Z")

@Api(value = "jobs", description = "the jobs API")
public interface JobsApi {

    @ApiOperation(value = "Create a new Job", nickname = "createJob", notes = "", response = Job.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "jobs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Job.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = BaseResponse.class) })
    @RequestMapping(value = "/jobs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Job> createJob(@ApiParam(value = "job JSON" ,required=true )  @Valid @RequestBody JobCreate body);


    @ApiOperation(value = "Delete job by id", nickname = "deleteJobById", notes = "", response = BaseResponse.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "jobs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BaseResponse.class),
        @ApiResponse(code = 400, message = "Invalid request", response = BaseResponse.class),
        @ApiResponse(code = 404, message = "Agent not found", response = BaseResponse.class) })
    @RequestMapping(value = "/jobs/{jobId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<BaseResponse> deleteJobById(@ApiParam(value = "Job id to delete",required=true) @PathVariable("jobId") String jobId);


    @ApiOperation(value = "Execute Action", nickname = "executeJobAction", notes = "", response = ActionResult.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "jobs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ActionResult.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = BaseResponse.class),
        @ApiResponse(code = 404, message = "Job not found", response = BaseResponse.class) })
    @RequestMapping(value = "/jobs/{jobId}/actions/{action}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ActionResult> executeJobAction(@ApiParam(value = "Name of the action to execute",required=true) @PathVariable("action") String action,@ApiParam(value = "ID of Job to execute action against",required=true) @PathVariable("jobId") String jobId,@ApiParam(value = "Parameters for the action" ,required=true )  @Valid @RequestBody ActionParams body);


    @ApiOperation(value = "Fetch agent by id", nickname = "fetchJobById", notes = "", response = Job.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "jobs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Job.class),
        @ApiResponse(code = 400, message = "Invalid request", response = BaseResponse.class),
        @ApiResponse(code = 404, message = "Job not found", response = BaseResponse.class) })
    @RequestMapping(value = "/jobs/{jobId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Job> fetchJobById(@ApiParam(value = "Id of job to return",required=true) @PathVariable("jobId") String jobId);


    @ApiOperation(value = "Search for jobs", nickname = "jobSearch", notes = "", response = Job.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "jobs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Job.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid request", response = BaseResponse.class),
        @ApiResponse(code = 404, message = "Job not found", response = BaseResponse.class) })
    @RequestMapping(value = "/jobs/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Job>> jobSearch(@ApiParam(value = "") @Valid @RequestParam(value = "os", required = false) String os,@ApiParam(value = "") @Valid @RequestParam(value = "state", required = false) String state,@ApiParam(value = "") @Valid @RequestParam(value = "host_name", required = false) String hostName,@ApiParam(value = "") @Valid @RequestParam(value = "ip", required = false) String ip);


    @ApiOperation(value = "Modify job by id", nickname = "modifyJobById", notes = "", response = Job.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "jobs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Job.class),
        @ApiResponse(code = 400, message = "Invalid request", response = BaseResponse.class),
        @ApiResponse(code = 404, message = "Job not found", response = BaseResponse.class) })
    @RequestMapping(value = "/jobs/{jobId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Job> modifyJobById(@ApiParam(value = "Job id to modify",required=true) @PathVariable("jobId") String jobId,@ApiParam(value = "Job JSON" ,required=true )  @Valid @RequestBody Job body);


    @ApiOperation(value = "Modify job by id", nickname = "patchJobById", notes = "", response = Job.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "jobs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Job.class),
        @ApiResponse(code = 400, message = "Invalid request", response = BaseResponse.class),
        @ApiResponse(code = 404, message = "Job not found", response = BaseResponse.class) })
    @RequestMapping(value = "/jobs/{jobId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Job> patchJobById(@ApiParam(value = "Job id to modify",required=true) @PathVariable("jobId") String jobId,@ApiParam(value = "Job JSON" ,required=true )  @Valid @RequestBody Job body);

}
