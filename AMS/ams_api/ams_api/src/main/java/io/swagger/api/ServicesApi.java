/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Agent;
import io.swagger.model.BaseResponse;
import io.swagger.model.Service;
import io.swagger.model.ServiceCreate;
import io.swagger.model.ServiceSuggest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-09-23T02:39:15.205Z")

@Api(value = "services", description = "the services API")
public interface ServicesApi {

    @ApiOperation(value = "Create a new service", nickname = "createService", notes = "", response = Service.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Service.class),
        @ApiResponse(code = 400, message = "Invalid request", response = BaseResponse.class) })
    @RequestMapping(value = "/services",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Service> createService(@ApiParam(value = "Service JSON" ,required=true )  @Valid @RequestBody ServiceCreate body);


    @ApiOperation(value = "Delete agent by id", nickname = "deleteServiceById", notes = "", response = Service.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Service.class),
        @ApiResponse(code = 400, message = "Invalid request", response = BaseResponse.class),
        @ApiResponse(code = 404, message = "Service not found", response = BaseResponse.class) })
    @RequestMapping(value = "/services/{serviceId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Service> deleteServiceById(@ApiParam(value = "Service id to delete",required=true) @PathVariable("serviceId") String serviceId);


    @ApiOperation(value = "Fetch service by id", nickname = "fetchServiceById", notes = "", response = Service.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Service.class),
        @ApiResponse(code = 400, message = "Invalid request", response = BaseResponse.class),
        @ApiResponse(code = 404, message = "Service not found", response = BaseResponse.class) })
    @RequestMapping(value = "/services/{serviceId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Service> fetchServiceById(@ApiParam(value = "ID of service to return",required=true) @PathVariable("serviceId") String serviceId);


    @ApiOperation(value = "Modify service by id", nickname = "modifyServiceById", notes = "", response = Service.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Service.class),
        @ApiResponse(code = 400, message = "Invalid request", response = BaseResponse.class),
        @ApiResponse(code = 404, message = "Service not found", response = BaseResponse.class) })
    @RequestMapping(value = "/services/{serviceId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Service> modifyServiceById(@ApiParam(value = "service id to modify",required=true) @PathVariable("serviceId") String serviceId,@ApiParam(value = "Service JSON" ,required=true )  @Valid @RequestBody Service body);


    @ApiOperation(value = "Patch service by id", nickname = "patchServiceById", notes = "", response = Agent.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Agent.class),
        @ApiResponse(code = 400, message = "Invalid request", response = BaseResponse.class),
        @ApiResponse(code = 404, message = "Agent not found", response = BaseResponse.class) })
    @RequestMapping(value = "/services/{serviceId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Agent> patchServiceById(@ApiParam(value = "Service id to modify",required=true) @PathVariable("serviceId") String serviceId,@ApiParam(value = "Agent JSON" ,required=true )  @Valid @RequestBody Agent body);


    @ApiOperation(value = "Search for services", nickname = "serviceSearch", notes = "", response = Service.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Service.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid request", response = BaseResponse.class),
        @ApiResponse(code = 404, message = "Agent not found", response = BaseResponse.class) })
    @RequestMapping(value = "/services/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Service>> serviceSearch(@ApiParam(value = "") @Valid @RequestParam(value = "service", required = false) String service,@ApiParam(value = "") @Valid @RequestParam(value = "state", required = false) String state,@ApiParam(value = "") @Valid @RequestParam(value = "pic", required = false) String pic);


    @ApiOperation(value = "autocomplete api", nickname = "serviceSuggest", notes = "", response = ServiceSuggest.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ServiceSuggest.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid request", response = BaseResponse.class),
        @ApiResponse(code = 404, message = "Service not found", response = BaseResponse.class) })
    @RequestMapping(value = "/services/suggest",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ServiceSuggest>> serviceSuggest(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "type", required = true) String type,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "input", required = true) String input);

}
